{
    "collab_server" : "",
    "contents" : "\\chapter{Introduction}\n\\label{ChapterOne}\n\\section{Reading Instructions}\n\\label{sec:Reading Instructions}\n\\indent Behind every successful company is a satisfied customer, which is the main reason many companies strive to satisfy their customers by providing a better service. Achieving such a goal should not be an easy one. In order for companies to satisfy their customers, they have first to assess their customer's state of whether they are satisfied already or not. This assessment can be done using various means depending on the nature of the company's business and the nature of the relation with the customer. Generally, customers are not eager on supplying their feedback to the companies. Although doing the opposite would be in the customer's better interest. Customers have this behavior for many reasons, some of them are: that companies don't know how to give the customer the right incentive to supply their feedback, they don't show their customers that their feedback is taken seriously, they don't supply their customers with an efficient method to deliver their feedback, etc.\n\n\\subsection{Motivation}\n\\label{subsec:Motivation}\n\\indent Development of mobile devices has eased our life by the rapid and ubiquitous access to information. There are many situations in which we know that data is physically stored but we are unable to access it or we lack the necessary infrastructure (no Internet access, no connection to the server) to save new data. Despite of the fact that access to Internet has grown exponentially in the last years, there are still places with no coverage or where wired infrastructure cannot be implemented. Here the permanent issue of offline data synchronization appears. This problem has been one hot topic since the appearance of distributed databases systems and continues to capture the interest of researchers. This represents an issue for the applications and systems that save or access resources on an online storage. These limitations reduce the functionality of the system and break the nonfunctional requirements. However, the evolution of technology and new intelligent data storage algorithms can be used for transforming mobile gadgets in a powerful element that allows user to easily inquire and store their information.\\\\\n\\indent The economy and the industry have started to change their business model and adapt it to the technological era by creating information solutions that allow both their employees and their customers to manipulate the valuable information. The trend has become even more prominent after the development of smart phones because they set the groundwork layer for communication. The most valuable resource that enriches application is data that is usually stored on a central repository from where it can be accessed by the users.\\\\\n\\indent Central storage of data is important for ensuring data consistency, but for complex systems a sole database is not enough. Replicas of the initial database are created on the end user's device, but in such a case there are several problems that may appear. The speed with which information changes or new information is added in most information systems is extremely high, reason for which a permanent communication between the original database and its replicas would be desirable. Unfortunately, a simple communication framework is not enough and without the proper mechanisms it will not be robust enough to overcome the potential issues and threats that may compromise data. Without being synchronized, the local replicas will not retain the consistency and data will be corrupted.\\\\\n\\indent Having the advantage of the mobile technology and their expansion from the computational point of view, we can develop a framework for data synchronization that can overpass the problems of connectivity and that will allow users to safely manipulate data. The desire of creating robust mobile applications that are able to handle user's data correctly and synchronize new data from local replicas with the centralized database are just some of the reasons from which the idea of this thesis emerged. The advantages of such a system can be easily observed by analyzing a real usage scenario and the reader can see a practical implementation of the proposed framework on a mobile application in the fourth chapter of the thesis.\n\n\\section{Problem Statement}\n\\indent Latest advances in technology and the huge amount of data to be stored have led to the development of large databases that are included in different applications. Most of the current business models store their informational resources in relational databases. Even though the concept and the process of including a database into a software program may seem an easy task, there are different challenges that have to be overcome. The progress of software design techniques and distributed computing have proposed business applications that work on several levels and that are spread on various computers.\\\\\n\\indent Availability of the data is one of the key nonfunctional requirements that can pose issues if not handled appropriately. Designing an application that is dedicated to many users and that stores the information of their activity or retrieves data from a database is constrained by the use of Internet. Without such a connection, the limitations become considerably big and the application looks like a painting containing only the frame. The dependency on a global database can be somehow regarded as relying on a single point of failure, reason for which a different implementation must be considered. \\\\\n\\indent Most of the existing systems that use a shared database contain a large amount of information, from which only a small part corresponds or can be viewed by a user. Instead of recreating a copy of the database or allowing the user to access the whole database, he should be allowed to work only with the subset of data that is related to his account. In such case, replication of the information from the database on every user device might seem a tedious process requiring both computational and resource related efforts, but the improvements that it might bring compensate these efforts. We will focus our attention mostly on this aspect from the point of view of the usage of mobile devices.\\\\\nEvolution of smart gadgets has transformed them from small portables to real computers. However, there are different limitations that have to be taken into account when designing and developing a mobile application. In the case when such an application is dependent on a global database, it cannot be properly used without an Internet connection. However, instead of using the global database, a local copy can be saved on the device thus loosening the Internet dependency. A local database might require additional storage resources from the memory of the mobile device (insignificant for the actual capacities of nowadays devices), but loosens the dependency on an Internet connection. The local database must be a reduced copy of the global one containing only the information that is relevant for the device's user in order to obtain a better efficiency.\nHaving local versions of a database must enforce data consistency, reason for which data synchronization is a key mechanism that has to be correctly implemented. The problem is even more important when the global database is integrated in more applications and stores data captured from different systems. The problems of keeping a synchronized copy of the global database have been tackled along time in different manners, but a more efficient solution for mobile devices must be found.\\\\\n\\indent Synchronizing data refers to the process to keep replicated copies of a database in the coherence with the original database and it can be done both in real-time (having a permanent connection to the server) or non real-time.\\cite{Sethia2014mobile} The intermittent connectivity to the server that stores the central repository raises the problem of creating a pragmatic non real-time synchronization algorithm.\\\\\n\\indent In fact the problem described before is one of the most remarkable issues existing in the client - server architectures that are dependent on client cached - copies of the relational databases stored on the server. Client cached entities must comply with the tuples saved and stored on the server side, while any change performed at the client side must be also transmitted to the server in such a way that it does not interfere with the existing data.\n\\label{sec:Problem Statement}\n\n\\section{Goal and Approach}\n\\label{sec:GoalAndApproach}\n\\indent The emerging development of offline mobile applications has led to the need of replicating the global data on users' devices. As stated in the previous subchapter, this approach leads to inconsistency between local and global data sets and can lead to illegal data states if not handled properly. The studies conducted in the area of offline data synchronization have underlined the main properties of the existent methods and their advantages and disadvantages for mobile platforms. We will get a closer look on these aspects in the next chapter.\\\\\n\\indent Time stamp algorithms have revealed suitable properties for mobile applications and if optimized for heterogeneous databases they can be an efficient solution for the problem tackled in the current thesis.\\\\\n\\indent This thesis proposes an offline data synchronization method based on the time stamp fields that is adjusted according to two different types of database information. Also, instead of choosing between periodic synchronization and on â€“ request synchronization a combined approach would be more suitable for a real application in order to satisfy both user requests and the consistency of data. Files that are saved as BLOB fields will be only updated on a periodical basis and more seldom than actual data stored in primitive types as the studies conducted in the case of our particular application revealed the fact that this part of the database is rarely changed and the changes are only unidirectional (the client side has to record the changes performed on the server side).\\\\\n\\indent In order to reduce the amount of data saved on the mobile devices in the local database, the information that will be replicated will be only the one that is applicable for the user of the phone who has authenticated himself beforehand. In this case, a client â€“ server architecture will simplify the\nstructure of the system and will reduce the possible problems that occur in the case of peerâ€“toâ€“peer solutions.\\\\\n\\indent Even though the latest mobile device generation has recorded noticeable computational advances, it is desirable to keep most of the processing efforts on the server side. In this sense, the processing of the data will be mostly handled on the server side. However, the retrieval of the entries that have to be synced will be assigned to the client side (mobile device). \\\\\n\\indent As users expect from their mobile phones to be easy to interact with and to perform their functionality independently of some aspects as Internet connectivity, location, data to be processed, the aim of this thesis is to propose a synchronization framework that will allow mobile applications to efficiently integrate global data with local data. We will start from a general solution that is platform independent and move further with describing the implementation on a particular case in an Android mobile application, B+ system. Besides the intended synchronization functionality, B+ will make use of some of the features that the mobile devices can offer in order to improve the users' experience and fulfill the usability requirement.\\\\\n\\indent Nowadays, the tendency is to replace desktop applications with mobile equivalents that are tailored for the characteristics of mobile devices. Usually, the layouts are changed so that only essential information is kept and the computational costs are reduced.\\\\\n\\indent The purpose of this thesis is to propose and implement a lightweight synchronization framework for mobile devices while satisfying other non - functional requirements as usability, accessibility and portability. As a distinction of other applications of this type, our solution is focused on both optimizing the resource consumption (bandwidth, computational resources) for the synchronizing process and improving the interaction with user by allowing him to make use of the device's camera for scanning the products or of the speech-to-text engine in order to retrieve the information in a more natural manner.\\\\\n\\indent As the proposed solution was thought as a real application, there are several criteria that it should match as we will present further on in this part of the thesis on the chapter four addressed to the particular solution for our problem.\n\n\\section{Original Contribution}\n\\label{sec:OriginalContribution}\nThe development of mobile gadgets and the availability of remote connection brings a new level of handling the distribution of data among multiple devices. Along time, different techniques of sharing data from a central repository to local replicas have been implemented. The early starts have dealt with exchanging the information for the entire database, but the process has been proved to require too many computational and storage resources. They have been mostly addressed to local replicas existent on other computers and cannot be integrated in mobile devices.\\\\\n\\indent In order to reduce the data load, new algorithms have been designed. They mostly rely on row - based timestamp comparisons or synchronization flags and aim to synchronize only data that has been modified since the last synchronization. This second step of developing synchronization algorithms is more appropriate for the use on mobile devices and tackles the problem of limited resources. However, there is a trade - off between the performance and the nonfunctional requirements that these algorithms can fulfill and not all of the aspects can be completely covered. For instance, one timestamp algorithm implementation can focus on the computational load and neglect the scalability while another one can concentrate on the scalability and might not take into account the data load.\\\\\n\\indent The third generation of database synchronization algorithms moves even deeper on the level of data that will be exchanged and focuses on the synchronization of fields (columns of data rows) that are not up to date. This approach is implemented in the recent Mobile Replicated Database Management Synchronization algorithm \\cite{Sethia2014mobile}.\\\\\n\\indent The current master thesis aims to improve the existing database timestamp synchronization algorithms by handling both the resource limitation of mobile devices and the characteristic nonfunctional requirements of mobile applications(scalability, availability, portability). Having its foundation on row - based synchronization methods, our approach tries to reduce the overload imposed by database conflicts by splitting the constituent fields of database rows in different parts according to their type. Most of the existent databases are heterogeneous and consist of different types of fields that can require different bandwidths when transmitted over the network. The most resource consuming part of the synchronization process is the one implied by file transfer and in the case of row - based synchronization it might be totally inefficient due to the fact that files do not change that often. This overload can be avoided if the synchronization of database fields corresponding to files is performed separately from the transfer of usual data. \\\\\n\\indent Mobile devices are designed to be ubiquitous, but however their use can impose some problems to the user. For client - server applications, a continuous connection is usually required but there are many cases in which the user is in an area where he does not have an Internet connection. Connectivity limitations are supported by enabling the user to work with the local copy of the database and store the information for as long as needed (until the connection with the server will be available for the user). But synchronizing whenever the device is reconnecting to the server might not be always necessary. Requesting synchronization must be done in different conditions: either on a periodical basis, either triggered by the user in different cases. Using both methods is important for keeping the information updated and also for avoiding unnecessary data transfer.\\\\\n\\indent In order to reduce the dependency on different technologies and platforms, this approach proposes a general framework for timestamp synchronization and extends it with a concrete implementation for an Android mobile application that will be deployed on the business market.\\\\\n\\indent The core of the thesis is a new database synchronization algorithm best suited for mobile applications. Having defined a concrete business model for a specific application, the implemented solution brings together new mobile technologies as barcode scanning and voice recognition in order to improve and diversify the interaction among the user and the device. The emphasize of the solution is put on the end user and it aims to transform a normal mobile device into a powerful tool for enabling the user to perform tasks that he would normally carry on on a computer.\n\\section{Outline of the Thesis}\n\\label{sec:OutlineOfTheThesis}\n\\indent The first chapter of the thesis makes a brief presentation of the concepts related with the project and makes the reader familiar with the aims and reasons that justify the selection of this topic.The background of the problem and a short description of the social and economic context are given in order to integrate the problem into the real world.\\\\\n\\indent In the second chapter, the general concept of database synchronization will be introduced and exemplified with the aid of the existing applications in this area. Existing database synchronization algorithms will be analyzed from the point of view of the processing requirements and their efficiency. We will move from general concepts to more specific aspects like offline persistence or constraints imposed by mobile devices. \\\\\n\\indent Based on the analysis of the algorithms performed in the second chapter, we propose a general database synchronization solution in the third chapter. We will describe the environment and the context in which it can be used, but the emphasis will be put on the design and the implementation of the synchronization framework. We will define also metrics for analyzing its performance.\\\\\n\\indent The proposed synchronization mechanism will be integrated in a mobile Android application that will be presented in the fifth chapter. A report on embedding the synchronization framework in the mobile application and its evaluation based on user requirements will be conducted.\\\\\n\\indent The fifth part of the paper contains details about the metrics used and the evaluation tests performed for the proposed database synchronization framework. Discussion will include an estimation of the results obtained and the extent to which this solution responds to the actual challenges of the database synchronization issues.\\\\\n\\indent A conclusion based on the research work will be drawn in the last chapter of the thesis. Description of problems encountered and limitations will be also provided. For readers interested in further research on this domain, future work proposals are given in this chapter.\\\\\n\\indent All the materials used in the research process conducted for the thesis are mentioned in the bibliography. All other aspects that are relevant for understanding the paper, but could not be added in the actual paper due to the fact that they may affect the information flow, can be found in the appendices.",
    "created" : 1496445211928.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1881988546",
    "id" : "D400F95A",
    "lastKnownWriteTime" : 1496457831,
    "last_content_update" : 1496457831,
    "path" : "~/Desktop/MasterThesisProject-AT/chapter_one.tex",
    "project_path" : "chapter_one.tex",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "tex"
}